metadata={systemName:"k2.jssp.dynamicserviceobject",displayName:"K2 JSSP Dynamic Service Object",description:"An example broker dynamically generates service objects.",configuration:{Columns:{displayName:"Columns (Comma Separated)",type:"string"}}},ondescribe=async function({configuration:e}){let t=e.Columns.split(",");var r={objects:{CSVReader:{displayName:"CSV Reader",description:"Reads a CSV file and returns the contents as a list.",properties:{}}}};for(let e of t)r.objects.CSVReader.properties[e]={displayName:e,type:"string"};postSchema(r)},onexecute=async function({objectName:e,methodName:t,parameters:r,properties:s,configuration:a,schema:o}){switch(e){case"todo":await async function(e,t,r){switch(e){case"get":await function(e){return new Promise((t,r)=>{var s=new XMLHttpRequest;if(s.onreadystatechange=function(){try{if(4!==s.readyState)return;if(200!==s.status)throw new Error("Failed with status "+s.status);var e=JSON.parse(s.responseText);postResult({id:e.id,userId:e.userId,title:e.title,completed:e.completed}),t()}catch(e){r(e)}},"number"!=typeof e.id)throw new Error('properties["id"] is not of type number');s.open("GET","https://jsonplaceholder.typicode.com/todos/"+encodeURIComponent(e.id)),s.setRequestHeader("test","test value"),s.send()})}(t);break;case"getParams":await function(e){return new Promise((t,r)=>{try{postResult({id:e.pid}),t()}catch(e){r(e)}})}(r);break;default:throw new Error("The method "+e+" is not supported.")}}(t,s,r);break;default:throw new Error("The object "+e+" is not supported.")}};
//# sourceMappingURL=index.js.map
