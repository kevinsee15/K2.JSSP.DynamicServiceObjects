{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import \"@k2oss/k2-broker-core\";\n\nmetadata = {\n  systemName: \"k2.jssp.dynamicserviceobject\",\n  displayName: \"K2 JSSP Dynamic Service Object\",\n  description: \"An example broker dynamically generates service objects.\",\n  configuration: {\n    \"Columns\": {\n     \"displayName\": \"Columns (Comma Separated)\",\n     \"type\": \"string\"\n    }\n  }\n};\n\nondescribe = async function ({ configuration }): Promise<void> {\n  let columnsCSV: string = <string> configuration[\"Columns\"];\n  let columns: string[] = columnsCSV.split(\",\");\n\n  var schema = {\n    objects: {\n      \"ExcelCSVReader\" : {\n        displayName: \"Excel or CSV Reader\",\n        description: \"Reads a CSV file and returns the contents as a list.\",\n        properties: {},\n        methods: {\n          Read : {\n            displayName: \"Read\",\n            type: \"list\",\n            inputs:[],\n            outputs:[]\n          }\n        }\n      }\n    }\n  }\n\n  for (let column of columns) {\n    schema.objects.ExcelCSVReader.properties[column] = {\n      displayName: column,\n      type: \"string\"\n    };\n  }\n\n  schema.objects.ExcelCSVReader.methods.Read.inputs = columns;\n  schema.objects.ExcelCSVReader.methods.Read.outputs = columns;\n\n  postSchema(schema);\n};\n\nonexecute = async function ({\n  objectName,\n  methodName,\n  parameters,\n  properties,\n  configuration,\n  schema,\n}): Promise<void> {\n  switch (objectName) {\n    case \"ExcelCSVReader\":\n      await onexecute_ExcelCSVReader(methodName, properties, parameters);\n      break;\n    default:\n      throw new Error(\"The object \" + objectName + \" is not supported.\");\n  }\n};\n\nasync function onexecute_ExcelCSVReader(\n  methodName: string,\n  properties: SingleRecord,\n  parameters: SingleRecord\n): Promise<void> {\n  switch (methodName) {\n    case \"Read\":\n      await onexecute_ExcelCSVReader_Read(properties);\n      break;\n    default:\n      throw new Error(\"The method \" + methodName + \" is not supported.\");\n  }\n}\n\nfunction onexecute_ExcelCSVReader_Read(properties: SingleRecord) {\n  postResult([\n    {\n      \"Full Name\": \"John Doe\",\n      \"Age\": \"29\",\n      \"Birthdate\": \"11/12/1992\",\n      \"Birth Place\": \"Singapore, Singapore\",\n      \"Contact Number\": \"65 8888 1111\"\n    },\n    {\n      \"Full Name\": \"Jane Doe\",\n      \"Age\": \"27\",\n      \"Birthdate\": \"01/08/1992\",\n      \"Birth Place\": \"Johor, Malaysia\",\n      \"Contact Number\": \"65 1111 8888\"\n    }\n  ]);\n}"],"names":["metadata","systemName","displayName","description","configuration","ondescribe","async","columns","split","schema","objects","properties","methods","Read","type","inputs","outputs","column","ExcelCSVReader","postSchema","onexecute","objectName","methodName","parameters","postResult","Error","onexecute_ExcelCSVReader"],"mappings":"AAEAA,SAAW,CACTC,WAAY,+BACZC,YAAa,iCACbC,YAAa,2DACbC,cAAe,SACF,aACK,iCACP,YAKbC,WAAaC,gBAAgBF,cAAEA,QAEzBG,EAD8BH,EAAa,QACZI,MAAM,SAErCC,EAAS,CACXC,QAAS,gBACY,CACjBR,YAAa,sBACbC,YAAa,uDACbQ,WAAY,GACZC,QAAS,CACPC,KAAO,CACLX,YAAa,OACbY,KAAM,OACNC,OAAO,GACPC,QAAQ,YAOb,IAAIC,KAAUV,EACjBE,EAAOC,QAAQQ,eAAeP,WAAWM,GAAU,CACjDf,YAAae,EACbH,KAAM,UAIVL,EAAOC,QAAQQ,eAAeN,QAAQC,KAAKE,OAASR,EACpDE,EAAOC,QAAQQ,eAAeN,QAAQC,KAAKG,QAAUT,EAErDY,WAAWV,IAGbW,UAAYd,gBAAgBe,WAC1BA,EAD0BC,WAE1BA,EAF0BC,WAG1BA,EAH0BZ,WAI1BA,EAJ0BP,cAK1BA,EAL0BK,OAM1BA,WAEQY,OACD,uBAQTf,eACEgB,EACAX,EACAY,UAEQD,OACD,kBASPE,WAAW,CACT,aACe,eACN,eACM,2BACE,wCACG,gBAEpB,aACe,eACN,eACM,2BACE,mCACG,sCAlBZ,IAAIC,MAAM,cAAgBH,EAAa,uBAjBvCI,CAAyBJ,uBAGzB,IAAIG,MAAM,cAAgBJ,EAAa"}